package io.vertx.intro.first;

import io.vertx.config.ConfigRetriever;
import io.vertx.core.AbstractVerticle;
import io.vertx.core.CompositeFuture;
import io.vertx.core.Future;
import io.vertx.core.http.HttpServerResponse;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.jdbc.JDBCClient;
import io.vertx.ext.sql.SQLConnection;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.ext.sql.UpdateResult;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;
import io.vertx.ext.web.handler.BodyHandler;
import io.vertx.ext.web.handler.StaticHandler;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import static io.vertx.intro.first.ActionHelper.*;

public class LibraryApp extends AbstractVerticle {

    private JDBCClient jdbc;

    @Override
    public void start(Future<Void> fut) {

        Router router = Router.router(vertx);

        router.route("/").handler(routingContext -> {
                HttpServerResponse response = routingContext.response();
               response
                .putHeader("content-type", "text/html")
                .end("<div>Welcome to the Library </div1>"
                + "<a href='assets/Books.html'>App</a>"
                );
        });
        
        router.route("/assets/*").handler(StaticHandler.create("assets"));
        
        router.get("/api/books").handler(this::getAllBooks);
        router.get("/api/books/:id").handler(this::getOneBook);
        router.route("/api/books*").handler(BodyHandler.create());
        router.post("/api/books").handler(this::addOneBook);
        router.delete("/api/books/:id").handler(this::deleteOneBook);
        router.put("/api/books/:id").handler(this::updateOneBook);
        
        router.get("/api/users").handler(this::getAllUsers);
        router.get("/api/users/:id").handler(this::getOneUser);
        router.route("/api/users*").handler(BodyHandler.create());
        router.post("/api/users").handler(this::addOneUser);
        router.delete("/api/users/:id").handler(this::deleteOneUser);
        router.put("/api/users/:id").handler(this::updateOneUser);

        ConfigRetriever retriever = ConfigRetriever.create(vertx);

        ConfigRetriever.getConfigAsFuture(retriever)
            .compose(config -> {
                jdbc = JDBCClient.createShared(vertx, config, "My-Reading-List");

                return connect()
                    .compose(connection -> {
                        Future<Void> future = Future.future();
                        
                        createBooksTable(connection)
                        .compose(this::createSampleBooks)
                        .setHandler(x -> {
                            connection.close();
                            future.handle(x.mapEmpty());
                        });
                                                
                        createUsersTable(connection)
                        .compose(this::createSampleUsers)
                        .setHandler(x -> {
                            connection.close();
                            future.handle(x.mapEmpty());
                        });
                        
                        return future;
                    })
                    .compose(v -> createHttpServer(config, router));
            })
            .setHandler(fut);
    }

    private Future<Void> createHttpServer(JsonObject config, Router router) {
        Future<Void> future = Future.future();
        vertx
            .createHttpServer()
            .requestHandler(router::accept)
            .listen(
                config.getInteger("HTTP_PORT", 8080),
                res -> future.handle(res.mapEmpty())
            );
        return future;
    }

    private Future<SQLConnection> connect() {
        Future<SQLConnection> future = Future.future();
        jdbc.getConnection(ar ->
            future.handle(ar.map(c ->
                    c.setOptions(new SQLOptions().setAutoGeneratedKeys(true))
                )
            )
        );
        return future;
        
        
    }
        
    // ---- Create Books ----
    private Future<SQLConnection> createBooksTable(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        vertx.fileSystem().readFile("BooksTable.sql", ar -> {
            if (ar.failed()) {
                future.fail(ar.cause());
            } else {
                connection.execute(ar.result().toString(),
                    ar2 -> future.handle(ar2.map(connection))
                );
            }
        });
        return future;
    }

    private Future<SQLConnection> createSampleBooks(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        connection.query("SELECT * FROM Books", select -> {
            if (select.failed()) {
                future.fail(select.cause());
            } else {
                if (select.result().getResults().isEmpty()) {
                    Book book1= new Book("The Shining",
                        "Stephen King");
                    Book book2= new Book("Thinking in Java",
                        "Bruce Eckel");
                        
                    Future<Book> insertion1 = insertBook(connection, book1, false);
                    Future<Book> insertion2 = insertBook(connection, book2, false);
                    CompositeFuture.all(insertion1, insertion2)
                        .setHandler(r -> future.handle(r.map(connection)));
                } else {
                    future.complete(connection);
                }
            }
        });
        return future;
    }
    
 // ---- Create Users ----
    private Future<SQLConnection> createUsersTable(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        vertx.fileSystem().readFile("UsersTable.sql", ar -> {
            if (ar.failed()) {
                future.fail(ar.cause());
            } else {
                connection.execute(ar.result().toString(),
                    ar2 -> future.handle(ar2.map(connection))
                );
            }
        });
        return future;
    }

    private Future<SQLConnection> createSampleUsers(SQLConnection connection) {
        Future<SQLConnection> future = Future.future();
        connection.query("SELECT * FROM Users", select -> {
            if (select.failed()) {
                future.fail(select.cause());
            } else {
                if (select.result().getResults().isEmpty()) {
                    User user1= new User("Ryan Bertrand",
                        "Lender");
                    User user2 = new User("Jarrod Bowen",
                        "Library personnel");
                    Future<User> insertion1 = insertUser(connection, user1, false);
                    Future<User> insertion2 = insertUser(connection, user2, false);
                    CompositeFuture.all(insertion1, insertion2)
                        .setHandler(r -> future.handle(r.map(connection)));
                } else {
                    future.complete(connection);
                }
            }
        });
        return future;
    }
    
 
    // ---- Book Queries ----
    private Future<Book> insertBook(SQLConnection connection, Book book, boolean closeConnection) {
        Future<Book> future = Future.future();
        String sql = "INSERT INTO Books (title, author) VALUES (?, ?)";
        connection.updateWithParams(sql,
            new JsonArray().add(book.getTitle()).add(book.getAuthor()),
            ar -> {
                if (closeConnection) {
                    connection.close();
                }
                future.handle(
                    ar.map(res -> new Book(res.getKeys().getLong(0), book.getTitle(), book.getAuthor()))
                );
            }
        );
        return future;
    }

    private Future<List<Book>> queryBook(SQLConnection connection) {
        Future<List<Book>> future = Future.future();
        connection.query("SELECT * FROM Books", result -> {
                connection.close();
                        future.handle(
                		result.map(rs -> rs.getRows().stream().map(Book::new).collect(Collectors.toList()))
                );
            }
        );
        return future;
    }

    private Future<Book> queryOneBook(SQLConnection connection, String id) {
        Future<Book> future = Future.future();
        String sql = "SELECT * FROM Books WHERE id = ?";
        connection.queryWithParams(sql, new JsonArray().add(Integer.valueOf(id)), result -> {
            connection.close();
            future.handle(
                result.map(rs -> {
                    List<JsonObject> rows = rs.getRows();
                    if (rows.size() == 0) {
                        throw new NoSuchElementException("No book with id " + id);
                    } else {
                        JsonObject row = rows.get(0);
                        return new Book(row);
                    }
                })
            );
        });
        return future;
    }

    private Future<Void> updateBook(SQLConnection connection, String id, Book book) {
        Future<Void> future = Future.future();
        String sql = "UPDATE Books SET title = ?, author = ? WHERE id = ?";
        connection.updateWithParams(sql, new JsonArray().add(book.getTitle()).add(book.getAuthor())
                .add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    UpdateResult ur = ar.result();
                    if (ur.getUpdated() == 0) {
                        future.fail(new NoSuchElementException("No book with id " + id));
                    } else {
                        future.complete();
                    }
                }
            });
        return future;
    }

    private Future<Void> deleteBook(SQLConnection connection, String id) {
        Future<Void> future = Future.future();
        String sql = "DELETE FROM Books WHERE id = ?";
        connection.updateWithParams(sql,
            new JsonArray().add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    if (ar.result().getUpdated() == 0) {
                        future.fail(new NoSuchElementException("Unknown book " + id));
                    } else {
                        future.complete();
                    }
                }
            }
        );
        return future;
    }

    // ---- User Queries ----
    private Future<User> insertUser(SQLConnection connection, User user, boolean closeConnection) {
        Future<User> future = Future.future();
        String sql = "INSERT INTO Users (name, type) VALUES (?, ?)";
        connection.updateWithParams(sql,
            new JsonArray().add(user.getName()).add(user.getType()),
            ar -> {
                if (closeConnection) {
                    connection.close();
                }
                future.handle(
                    ar.map(res -> new User(res.getKeys().getLong(0), user.getName(), user.getType()))
                );
            }
        );
        return future;
    }

    private Future<List<User>> queryUser(SQLConnection connection) {
        Future<List<User>> future = Future.future();
        connection.query("SELECT * FROM Users", result -> {
                connection.close();
                        future.handle(
                		result.map(rs -> rs.getRows().stream().map(User::new).collect(Collectors.toList()))
                );
            }
        );
        return future;
    }

    private Future<User> queryOneUser(SQLConnection connection, String id) {
        Future<User> future = Future.future();
        String sql = "SELECT * FROM Users WHERE id = ?";
        connection.queryWithParams(sql, new JsonArray().add(Integer.valueOf(id)), result -> {
            connection.close();
            future.handle(
                result.map(rs -> {
                    List<JsonObject> rows = rs.getRows();
                    if (rows.size() == 0) {
                        throw new NoSuchElementException("No user with id " + id);
                    } else {
                        JsonObject row = rows.get(0);
                        return new User(row);
                    }
                })
            );
        });
        return future;
    }

    private Future<Void> updateUser(SQLConnection connection, String id, User user) {
        Future<Void> future = Future.future();
        String sql = "UPDATE Users SET name = ?, type = ? WHERE id = ?";
        connection.updateWithParams(sql, new JsonArray().add(user.getName()).add(user.getType())
                .add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    UpdateResult ur = ar.result();
                    if (ur.getUpdated() == 0) {
                        future.fail(new NoSuchElementException("No user with id " + id));
                    } else {
                        future.complete();
                    }
                }
            });
        return future;
    }

    private Future<Void> deleteUser(SQLConnection connection, String id) {
        Future<Void> future = Future.future();
        String sql = "DELETE FROM Users WHERE id = ?";
        connection.updateWithParams(sql,
            new JsonArray().add(Integer.valueOf(id)),
            ar -> {
                connection.close();
                if (ar.failed()) {
                    future.fail(ar.cause());
                } else {
                    if (ar.result().getUpdated() == 0) {
                        future.fail(new NoSuchElementException("Unknown user " + id));
                    } else {
                        future.complete();
                    }
                }
            }
        );
        return future;
    }

    // ---- Users HTTP Actions ----
    private void getAllUsers(RoutingContext rc) {
        connect()
            .compose(this::queryUser)
            .setHandler(ok(rc));
    }

    private void addOneUser(RoutingContext rc) {
        User user = rc.getBodyAsJson().mapTo(User.class);
        connect()
            .compose(connection -> insertUser(connection, user, true))
            .setHandler(created(rc));
    }


    private void deleteOneUser(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> deleteUser(connection, id))
            .setHandler(noContent(rc));
    }


    private void getOneUser(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> queryOneUser(connection, id))
            .setHandler(ok(rc));
    }

    private void updateOneUser(RoutingContext rc) {
        String id = rc.request().getParam("id");
        User user = rc.getBodyAsJson().mapTo(User.class);
        connect()
            .compose(connection -> updateUser(connection, id, user))
            .setHandler(noContent(rc));
    }
        
    // ---- Books HTTP Actions ----
    private void getAllBooks(RoutingContext rc) {
        connect()
            .compose(this::queryBook)
            .setHandler(ok(rc));
    }

    private void addOneBook(RoutingContext rc) {
        Book book = rc.getBodyAsJson().mapTo(Book.class);
        connect()
            .compose(connection -> insertBook(connection, book, true))
            .setHandler(created(rc));
    }


    private void deleteOneBook(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> deleteBook(connection, id))
            .setHandler(noContent(rc));
    }


    private void getOneBook(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .compose(connection -> queryOneBook(connection, id))
            .setHandler(ok(rc));
    }

    private void updateOneBook(RoutingContext rc) {
        String id = rc.request().getParam("id");
        Book book= rc.getBodyAsJson().mapTo(Book.class);
        connect()
            .compose(connection -> updateBook(connection, id, book))
            .setHandler(noContent(rc));
    }

}